/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, HostListener, Inject, Input, Optional, } from '@angular/core';
import { NG_VALUE_ACCESSOR, } from '@angular/forms';
import * as Cleave from 'cleave.js';
export class NgxCleaveDirective {
    /**
     * @param {?} elementRef
     * @param {?} valueAccessors
     */
    constructor(elementRef, valueAccessors) {
        this.elementRef = elementRef;
        this.valueAccessors = valueAccessors;
    }
    /**
     * @param {?} cleave
     * @return {?}
     */
    set cleave(cleave) {
        this._cleave = cleave;
        this.setCleave();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.valueAccessors) {
            console.warn('Note: The cleave directive should be used with the ngModel, formControl or formControlName directives.');
            return;
        }
        if (this.valueAccessors.length) {
            this._valueAccessor = this.valueAccessors[0];
            this._writeValue = this._valueAccessor.writeValue;
            this._valueAccessor.writeValue = (value) => {
                if (this._writeValue) {
                    this._writeValue.call(this._valueAccessor, value);
                }
                this.setCleave();
            };
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._valueAccessor && this._writeValue) {
            this._valueAccessor.writeValue = this._writeValue;
        }
        if (this._cleaveInstance) {
            this._cleaveInstance.destroy();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onInput(value) {
        this._value = value;
    }
    /**
     * @return {?}
     */
    setCleave() {
        if (this._cleaveInstance) {
            this._cleaveInstance.destroy();
        }
        const /** @type {?} */ el = this.elementRef.nativeElement;
        this._cleaveInstance = new Cleave(el, Object.assign({}, this._cleave, { onValueChanged: ({ target }) => {
                if (target.value !== this._value) {
                    this.dispatchEvent(el, 'input');
                }
            } }));
        // hack for model -> view cleave
        setTimeout(() => this.dispatchEvent(el, 'input'), 0);
    }
    /**
     * @param {?} el
     * @param {?} eventType
     * @return {?}
     */
    dispatchEvent(el, eventType) {
        const /** @type {?} */ event = document.createEvent('Event');
        event.initEvent(eventType, false, false);
        el.dispatchEvent(event);
    }
}
NgxCleaveDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[cleave],textarea[cleave]',
            },] },
];
/** @nocollapse */
NgxCleaveDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Array, decorators: [{ type: Inject, args: [NG_VALUE_ACCESSOR,] }, { type: Optional },] },
];
NgxCleaveDirective.propDecorators = {
    "cleave": [{ type: Input },],
    "onInput": [{ type: HostListener, args: ['input', ['$event.target.value'],] },],
};
function NgxCleaveDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgxCleaveDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgxCleaveDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    NgxCleaveDirective.propDecorators;
    /** @type {?} */
    NgxCleaveDirective.prototype._cleave;
    /** @type {?} */
    NgxCleaveDirective.prototype._cleaveInstance;
    /** @type {?} */
    NgxCleaveDirective.prototype._value;
    /** @type {?} */
    NgxCleaveDirective.prototype._valueAccessor;
    /** @type {?} */
    NgxCleaveDirective.prototype._writeValue;
    /** @type {?} */
    NgxCleaveDirective.prototype.elementRef;
    /** @type {?} */
    NgxCleaveDirective.prototype.valueAccessors;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWNsZWF2ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY2xlYXZlLWRpcmVjdGl2ZS8iLCJzb3VyY2VzIjpbIm5neC1jbGVhdmUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFHTCxRQUFRLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUVMLGlCQUFpQixHQUNsQixNQUFNLGdCQUFnQixDQUFDO0FBRXhCLE9BQU8sS0FBSyxNQUFNLE1BQU0sV0FBVyxDQUFDO0FBS3BDLE1BQU07Ozs7O0lBZ0JKLFlBQ1UsWUFDdUM7UUFEdkMsZUFBVSxHQUFWLFVBQVU7UUFDNkIsbUJBQWMsR0FBZCxjQUFjO0tBRTlEOzs7OztRQWxCWSxNQUFNLENBQUUsTUFBVztRQUU5QixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUV0QixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7Ozs7O0lBZ0JuQixRQUFRO1FBRU4sRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUV6QixPQUFPLENBQUMsSUFBSSxDQUFDLHdHQUF3RyxDQUFDLENBQUM7WUFFdkgsTUFBTSxDQUFDO1NBRVI7UUFFRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFFL0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTdDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUM7WUFDbEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFFekMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7b0JBQ3JCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7aUJBQ25EO2dCQUVELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUVsQixDQUFDO1NBRUg7S0FFRjs7OztJQUVELFdBQVc7UUFFVCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBRTVDLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7U0FFbkQ7UUFFRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztZQUV6QixJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBRWhDO0tBRUY7Ozs7O0lBR0QsT0FBTyxDQUFFLEtBQWE7UUFFcEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7Ozs7O0lBSWQsU0FBUztRQUVmLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1lBRXpCLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7U0FFaEM7UUFFRCx1QkFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDekMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxFQUFFLG9CQUMvQixJQUFJLENBQUMsT0FBTyxJQUNmLGNBQWMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtnQkFDN0IsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFFakMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7aUJBRWpDO2FBQ0YsSUFDRCxDQUFDOztRQUdILFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzs7Ozs7OztJQUkvQyxhQUFhLENBQUUsRUFBRSxFQUFFLFNBQVM7UUFFbEMsdUJBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7Ozs7WUExRzNCLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0NBQWdDO2FBQzNDOzs7O1lBakJDLFVBQVU7d0NBb0NQLE1BQU0sU0FBQyxpQkFBaUIsY0FBRyxRQUFROzs7dUJBaEJyQyxLQUFLO3dCQWlFTCxZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMscUJBQXFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5qZWN0LFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE9wdGlvbmFsLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIENvbnRyb2xWYWx1ZUFjY2Vzc29yLFxuICBOR19WQUxVRV9BQ0NFU1NPUixcbn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgKiBhcyBDbGVhdmUgZnJvbSAnY2xlYXZlLmpzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnaW5wdXRbY2xlYXZlXSx0ZXh0YXJlYVtjbGVhdmVdJyxcbn0pXG5leHBvcnQgY2xhc3MgTmd4Q2xlYXZlRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpIHNldCBjbGVhdmUgKGNsZWF2ZTogYW55KSB7XG5cbiAgICB0aGlzLl9jbGVhdmUgPSBjbGVhdmU7XG5cbiAgICB0aGlzLnNldENsZWF2ZSgpO1xuXG4gIH1cblxuICBwcml2YXRlIF9jbGVhdmU6IGFueTtcbiAgcHJpdmF0ZSBfY2xlYXZlSW5zdGFuY2U6IENsZWF2ZTtcbiAgcHJpdmF0ZSBfdmFsdWU6IHN0cmluZztcbiAgcHJpdmF0ZSBfdmFsdWVBY2Nlc3NvcjogQ29udHJvbFZhbHVlQWNjZXNzb3I7XG4gIHByaXZhdGUgX3dyaXRlVmFsdWU6ICh2YWx1ZSkgPT4gdm9pZDtcblxuICBjb25zdHJ1Y3RvciAoXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIEBJbmplY3QoTkdfVkFMVUVfQUNDRVNTT1IpIEBPcHRpb25hbCgpIHByaXZhdGUgdmFsdWVBY2Nlc3NvcnM6IENvbnRyb2xWYWx1ZUFjY2Vzc29yW10sXG4gICkge1xuICB9XG5cbiAgbmdPbkluaXQgKCkge1xuXG4gICAgaWYgKCF0aGlzLnZhbHVlQWNjZXNzb3JzKSB7XG5cbiAgICAgIGNvbnNvbGUud2FybignTm90ZTogVGhlIGNsZWF2ZSBkaXJlY3RpdmUgc2hvdWxkIGJlIHVzZWQgd2l0aCB0aGUgbmdNb2RlbCwgZm9ybUNvbnRyb2wgb3IgZm9ybUNvbnRyb2xOYW1lIGRpcmVjdGl2ZXMuJyk7XG5cbiAgICAgIHJldHVybjtcblxuICAgIH1cblxuICAgIGlmICh0aGlzLnZhbHVlQWNjZXNzb3JzLmxlbmd0aCkge1xuXG4gICAgICB0aGlzLl92YWx1ZUFjY2Vzc29yID0gdGhpcy52YWx1ZUFjY2Vzc29yc1swXTtcblxuICAgICAgdGhpcy5fd3JpdGVWYWx1ZSA9IHRoaXMuX3ZhbHVlQWNjZXNzb3Iud3JpdGVWYWx1ZTtcbiAgICAgIHRoaXMuX3ZhbHVlQWNjZXNzb3Iud3JpdGVWYWx1ZSA9ICh2YWx1ZSkgPT4ge1xuXG4gICAgICAgIGlmICh0aGlzLl93cml0ZVZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5fd3JpdGVWYWx1ZS5jYWxsKHRoaXMuX3ZhbHVlQWNjZXNzb3IsIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0Q2xlYXZlKCk7XG5cbiAgICAgIH07XG5cbiAgICB9XG5cbiAgfVxuXG4gIG5nT25EZXN0cm95ICgpIHtcblxuICAgIGlmICh0aGlzLl92YWx1ZUFjY2Vzc29yICYmIHRoaXMuX3dyaXRlVmFsdWUpIHtcblxuICAgICAgdGhpcy5fdmFsdWVBY2Nlc3Nvci53cml0ZVZhbHVlID0gdGhpcy5fd3JpdGVWYWx1ZTtcblxuICAgIH1cblxuICAgIGlmICh0aGlzLl9jbGVhdmVJbnN0YW5jZSkge1xuXG4gICAgICB0aGlzLl9jbGVhdmVJbnN0YW5jZS5kZXN0cm95KCk7XG5cbiAgICB9XG5cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2lucHV0JywgWyckZXZlbnQudGFyZ2V0LnZhbHVlJ10pXG4gIG9uSW5wdXQgKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcblxuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG5cbiAgfVxuXG4gIHByaXZhdGUgc2V0Q2xlYXZlICgpIHtcblxuICAgIGlmICh0aGlzLl9jbGVhdmVJbnN0YW5jZSkge1xuXG4gICAgICB0aGlzLl9jbGVhdmVJbnN0YW5jZS5kZXN0cm95KCk7XG5cbiAgICB9XG5cbiAgICBjb25zdCBlbCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIHRoaXMuX2NsZWF2ZUluc3RhbmNlID0gbmV3IENsZWF2ZShlbCwge1xuICAgICAgLi4udGhpcy5fY2xlYXZlLFxuICAgICAgb25WYWx1ZUNoYW5nZWQ6ICh7IHRhcmdldCB9KSA9PiB7XG4gICAgICAgIGlmICh0YXJnZXQudmFsdWUgIT09IHRoaXMuX3ZhbHVlKSB7XG5cbiAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZWwsICdpbnB1dCcpO1xuXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyBoYWNrIGZvciBtb2RlbCAtPiB2aWV3IGNsZWF2ZVxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5kaXNwYXRjaEV2ZW50KGVsLCAnaW5wdXQnKSwgMCk7XG5cbiAgfVxuXG4gIHByaXZhdGUgZGlzcGF0Y2hFdmVudCAoZWwsIGV2ZW50VHlwZSkge1xuXG4gICAgY29uc3QgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldmVudC5pbml0RXZlbnQoZXZlbnRUeXBlLCBmYWxzZSwgZmFsc2UpO1xuICAgIGVsLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXG4gIH1cblxufVxuIl19