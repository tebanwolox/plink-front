{"version":3,"sources":["ng://ngx-cleave-directive/ngx-cleave.directive.ts","ng://ngx-cleave-directive/ngx-cleave-directive.module.ts"],"names":["NgxCleaveDirective","elementRef","valueAccessors","this","prototype","cleave","_cleave","setCleave","ngOnInit","_this","length","_valueAccessor","_writeValue","writeValue","value","call","console","warn","ngOnDestroy","_cleaveInstance","destroy","onInput","_value","el","nativeElement","Cleave","tslib_1","__assign","onValueChanged","_a","target","dispatchEvent","setTimeout","eventType","event","document","createEvent","initEvent","Directive","args","selector","ElementRef","Inject","NG_VALUE_ACCESSOR","type","Optional","Input","HostListener","NgxCleaveDirectiveModule","NgModule","imports","declarations","exports"],"mappings":"0aAoCE,SAAAA,EACUC,EACuCC,GADvCC,KAAAF,WAAAA,EACuCE,KAAAD,eAAAA,+BAhBpCF,EAAAI,UAAA,SAAM,cAAEC,GAEnBF,KAAKG,QAAUD,EAEfF,KAAKI,6CAgBPP,EAAAI,UAAAI,SAAA,WAAA,IAAAC,EAAAN,KAEOA,KAAKD,eAQNC,KAAKD,eAAeQ,SAEtBP,KAAKQ,eAAiBR,KAAKD,eAAe,GAE1CC,KAAKS,YAAcT,KAAKQ,eAAeE,WACvCV,KAAKQ,eAAeE,WAAa,SAACC,GAE5BL,EAAKG,aACPH,EAAKG,YAAYG,KAAKN,EAAKE,eAAgBG,GAG7CL,EAAKF,cAjBPS,QAAQC,KAAK,2GAyBjBjB,EAAAI,UAAAc,YAAA,WAEMf,KAAKQ,gBAAkBR,KAAKS,cAE9BT,KAAKQ,eAAeE,WAAaV,KAAKS,aAIpCT,KAAKgB,iBAEPhB,KAAKgB,gBAAgBC,WAOzBpB,EAAAI,UAAAiB,iBAASP,GAEPX,KAAKmB,OAASR,GAIRd,EAAAI,UAAAG,gCAEFJ,KAAKgB,iBAEPhB,KAAKgB,gBAAgBC,UAIvB,IAAMG,EAAKpB,KAAKF,WAAWuB,cAC3BrB,KAAKgB,gBAAkB,IAAIM,EAAOF,EAAEG,EAAAC,SAAA,GAC/BxB,KAAKG,QAAO,CACfsB,eAAgB,SAACC,GAAEA,EAAAC,OACNhB,QAAUL,EAAKa,QAExBb,EAAKsB,cAAcR,EAAI,aAO7BS,WAAW,WAAM,OAAAvB,EAAKsB,cAAcR,EAAI,UAAU,IAI5CvB,EAAAI,UAAA2B,uBAAeR,EAAIU,GAEzB,IAAMC,EAAQC,SAASC,YAAY,SACnCF,EAAMG,UAAUJ,GAAW,GAAO,GAClCV,EAAGQ,cAAcG,wBA1GpBI,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,8EAhBVC,EAAAA,0CAoCGC,EAAAA,OAAMH,KAAA,CAACI,EAAAA,oBAAiB,CAAAC,KAAGC,EAAAA,8CAhB7BC,EAAAA,uBAiEAC,EAAAA,aAAYR,KAAA,CAAC,QAAS,CAAC,gCCvF1BS,EAAA,oDAGCC,EAAAA,SAAQV,KAAA,CAAC,CACRW,QAAS,GACTC,aAAc,CAACnD,GACfoD,QAAS,CAACpD,SANZ","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  HostListener,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\n\nimport * as Cleave from 'cleave.js';\n\n@Directive({\n  selector: 'input[cleave],textarea[cleave]',\n})\nexport class NgxCleaveDirective implements OnInit, OnDestroy {\n\n  @Input() set cleave (cleave: any) {\n\n    this._cleave = cleave;\n\n    this.setCleave();\n\n  }\n\n  private _cleave: any;\n  private _cleaveInstance: Cleave;\n  private _value: string;\n  private _valueAccessor: ControlValueAccessor;\n  private _writeValue: (value) => void;\n\n  constructor (\n    private elementRef: ElementRef,\n    @Inject(NG_VALUE_ACCESSOR) @Optional() private valueAccessors: ControlValueAccessor[],\n  ) {\n  }\n\n  ngOnInit () {\n\n    if (!this.valueAccessors) {\n\n      console.warn('Note: The cleave directive should be used with the ngModel, formControl or formControlName directives.');\n\n      return;\n\n    }\n\n    if (this.valueAccessors.length) {\n\n      this._valueAccessor = this.valueAccessors[0];\n\n      this._writeValue = this._valueAccessor.writeValue;\n      this._valueAccessor.writeValue = (value) => {\n\n        if (this._writeValue) {\n          this._writeValue.call(this._valueAccessor, value);\n        }\n\n        this.setCleave();\n\n      };\n\n    }\n\n  }\n\n  ngOnDestroy () {\n\n    if (this._valueAccessor && this._writeValue) {\n\n      this._valueAccessor.writeValue = this._writeValue;\n\n    }\n\n    if (this._cleaveInstance) {\n\n      this._cleaveInstance.destroy();\n\n    }\n\n  }\n\n  @HostListener('input', ['$event.target.value'])\n  onInput (value: string): void {\n\n    this._value = value;\n\n  }\n\n  private setCleave () {\n\n    if (this._cleaveInstance) {\n\n      this._cleaveInstance.destroy();\n\n    }\n\n    const el = this.elementRef.nativeElement;\n    this._cleaveInstance = new Cleave(el, {\n      ...this._cleave,\n      onValueChanged: ({ target }) => {\n        if (target.value !== this._value) {\n\n          this.dispatchEvent(el, 'input');\n\n        }\n      },\n    });\n\n    // hack for model -> view cleave\n    setTimeout(() => this.dispatchEvent(el, 'input'), 0);\n\n  }\n\n  private dispatchEvent (el, eventType) {\n\n    const event = document.createEvent('Event');\n    event.initEvent(eventType, false, false);\n    el.dispatchEvent(event);\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxCleaveDirective } from './ngx-cleave.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxCleaveDirective],\n  exports: [NgxCleaveDirective],\n})\nexport class NgxCleaveDirectiveModule {\n}\n"]}