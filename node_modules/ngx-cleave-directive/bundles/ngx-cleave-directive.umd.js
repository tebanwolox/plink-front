(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/core'), require('@angular/forms'), require('cleave.js')) :
    typeof define === 'function' && define.amd ? define('ngx-cleave-directive', ['exports', 'tslib', '@angular/core', '@angular/forms', 'cleave.js'], factory) :
    (factory((global['ngx-cleave-directive'] = {}),global.tslib,global.ng.core,global.ng.forms,null));
}(this, (function (exports,tslib_1,core,forms,Cleave) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxCleaveDirective = (function () {
        function NgxCleaveDirective(elementRef, valueAccessors) {
            this.elementRef = elementRef;
            this.valueAccessors = valueAccessors;
        }
        Object.defineProperty(NgxCleaveDirective.prototype, "cleave", {
            set: /**
             * @param {?} cleave
             * @return {?}
             */ function (cleave) {
                this._cleave = cleave;
                this.setCleave();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgxCleaveDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.valueAccessors) {
                    console.warn('Note: The cleave directive should be used with the ngModel, formControl or formControlName directives.');
                    return;
                }
                if (this.valueAccessors.length) {
                    this._valueAccessor = this.valueAccessors[0];
                    this._writeValue = this._valueAccessor.writeValue;
                    this._valueAccessor.writeValue = function (value) {
                        if (_this._writeValue) {
                            _this._writeValue.call(_this._valueAccessor, value);
                        }
                        _this.setCleave();
                    };
                }
            };
        /**
         * @return {?}
         */
        NgxCleaveDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this._valueAccessor && this._writeValue) {
                    this._valueAccessor.writeValue = this._writeValue;
                }
                if (this._cleaveInstance) {
                    this._cleaveInstance.destroy();
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NgxCleaveDirective.prototype.onInput = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this._value = value;
            };
        /**
         * @return {?}
         */
        NgxCleaveDirective.prototype.setCleave = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this._cleaveInstance) {
                    this._cleaveInstance.destroy();
                }
                var /** @type {?} */ el = this.elementRef.nativeElement;
                this._cleaveInstance = new Cleave(el, tslib_1.__assign({}, this._cleave, { onValueChanged: function (_a) {
                        var target = _a.target;
                        if (target.value !== _this._value) {
                            _this.dispatchEvent(el, 'input');
                        }
                    } }));
                // hack for model -> view cleave
                setTimeout(function () { return _this.dispatchEvent(el, 'input'); }, 0);
            };
        /**
         * @param {?} el
         * @param {?} eventType
         * @return {?}
         */
        NgxCleaveDirective.prototype.dispatchEvent = /**
         * @param {?} el
         * @param {?} eventType
         * @return {?}
         */
            function (el, eventType) {
                var /** @type {?} */ event = document.createEvent('Event');
                event.initEvent(eventType, false, false);
                el.dispatchEvent(event);
            };
        NgxCleaveDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'input[cleave],textarea[cleave]',
                    },] },
        ];
        /** @nocollapse */
        NgxCleaveDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: Array, decorators: [{ type: core.Inject, args: [forms.NG_VALUE_ACCESSOR,] }, { type: core.Optional },] },
            ];
        };
        NgxCleaveDirective.propDecorators = {
            "cleave": [{ type: core.Input },],
            "onInput": [{ type: core.HostListener, args: ['input', ['$event.target.value'],] },],
        };
        return NgxCleaveDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxCleaveDirectiveModule = (function () {
        function NgxCleaveDirectiveModule() {
        }
        NgxCleaveDirectiveModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [NgxCleaveDirective],
                        exports: [NgxCleaveDirective],
                    },] },
        ];
        return NgxCleaveDirectiveModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.NgxCleaveDirective = NgxCleaveDirective;
    exports.NgxCleaveDirectiveModule = NgxCleaveDirectiveModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWNsZWF2ZS1kaXJlY3RpdmUudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZ3gtY2xlYXZlLWRpcmVjdGl2ZS9uZ3gtY2xlYXZlLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmd4LWNsZWF2ZS1kaXJlY3RpdmUvbmd4LWNsZWF2ZS1kaXJlY3RpdmUubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSG9zdExpc3RlbmVyLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3B0aW9uYWwsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQ29udHJvbFZhbHVlQWNjZXNzb3IsXG4gIE5HX1ZBTFVFX0FDQ0VTU09SLFxufSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCAqIGFzIENsZWF2ZSBmcm9tICdjbGVhdmUuanMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdpbnB1dFtjbGVhdmVdLHRleHRhcmVhW2NsZWF2ZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hDbGVhdmVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCkgc2V0IGNsZWF2ZSAoY2xlYXZlOiBhbnkpIHtcblxuICAgIHRoaXMuX2NsZWF2ZSA9IGNsZWF2ZTtcblxuICAgIHRoaXMuc2V0Q2xlYXZlKCk7XG5cbiAgfVxuXG4gIHByaXZhdGUgX2NsZWF2ZTogYW55O1xuICBwcml2YXRlIF9jbGVhdmVJbnN0YW5jZTogQ2xlYXZlO1xuICBwcml2YXRlIF92YWx1ZTogc3RyaW5nO1xuICBwcml2YXRlIF92YWx1ZUFjY2Vzc29yOiBDb250cm9sVmFsdWVBY2Nlc3NvcjtcbiAgcHJpdmF0ZSBfd3JpdGVWYWx1ZTogKHZhbHVlKSA9PiB2b2lkO1xuXG4gIGNvbnN0cnVjdG9yIChcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgQEluamVjdChOR19WQUxVRV9BQ0NFU1NPUikgQE9wdGlvbmFsKCkgcHJpdmF0ZSB2YWx1ZUFjY2Vzc29yczogQ29udHJvbFZhbHVlQWNjZXNzb3JbXSxcbiAgKSB7XG4gIH1cblxuICBuZ09uSW5pdCAoKSB7XG5cbiAgICBpZiAoIXRoaXMudmFsdWVBY2Nlc3NvcnMpIHtcblxuICAgICAgY29uc29sZS53YXJuKCdOb3RlOiBUaGUgY2xlYXZlIGRpcmVjdGl2ZSBzaG91bGQgYmUgdXNlZCB3aXRoIHRoZSBuZ01vZGVsLCBmb3JtQ29udHJvbCBvciBmb3JtQ29udHJvbE5hbWUgZGlyZWN0aXZlcy4nKTtcblxuICAgICAgcmV0dXJuO1xuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmFsdWVBY2Nlc3NvcnMubGVuZ3RoKSB7XG5cbiAgICAgIHRoaXMuX3ZhbHVlQWNjZXNzb3IgPSB0aGlzLnZhbHVlQWNjZXNzb3JzWzBdO1xuXG4gICAgICB0aGlzLl93cml0ZVZhbHVlID0gdGhpcy5fdmFsdWVBY2Nlc3Nvci53cml0ZVZhbHVlO1xuICAgICAgdGhpcy5fdmFsdWVBY2Nlc3Nvci53cml0ZVZhbHVlID0gKHZhbHVlKSA9PiB7XG5cbiAgICAgICAgaWYgKHRoaXMuX3dyaXRlVmFsdWUpIHtcbiAgICAgICAgICB0aGlzLl93cml0ZVZhbHVlLmNhbGwodGhpcy5fdmFsdWVBY2Nlc3NvciwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRDbGVhdmUoKTtcblxuICAgICAgfTtcblxuICAgIH1cblxuICB9XG5cbiAgbmdPbkRlc3Ryb3kgKCkge1xuXG4gICAgaWYgKHRoaXMuX3ZhbHVlQWNjZXNzb3IgJiYgdGhpcy5fd3JpdGVWYWx1ZSkge1xuXG4gICAgICB0aGlzLl92YWx1ZUFjY2Vzc29yLndyaXRlVmFsdWUgPSB0aGlzLl93cml0ZVZhbHVlO1xuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NsZWF2ZUluc3RhbmNlKSB7XG5cbiAgICAgIHRoaXMuX2NsZWF2ZUluc3RhbmNlLmRlc3Ryb3koKTtcblxuICAgIH1cblxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignaW5wdXQnLCBbJyRldmVudC50YXJnZXQudmFsdWUnXSlcbiAgb25JbnB1dCAodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuXG4gICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcblxuICB9XG5cbiAgcHJpdmF0ZSBzZXRDbGVhdmUgKCkge1xuXG4gICAgaWYgKHRoaXMuX2NsZWF2ZUluc3RhbmNlKSB7XG5cbiAgICAgIHRoaXMuX2NsZWF2ZUluc3RhbmNlLmRlc3Ryb3koKTtcblxuICAgIH1cblxuICAgIGNvbnN0IGVsID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgdGhpcy5fY2xlYXZlSW5zdGFuY2UgPSBuZXcgQ2xlYXZlKGVsLCB7XG4gICAgICAuLi50aGlzLl9jbGVhdmUsXG4gICAgICBvblZhbHVlQ2hhbmdlZDogKHsgdGFyZ2V0IH0pID0+IHtcbiAgICAgICAgaWYgKHRhcmdldC52YWx1ZSAhPT0gdGhpcy5fdmFsdWUpIHtcblxuICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChlbCwgJ2lucHV0Jyk7XG5cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIGhhY2sgZm9yIG1vZGVsIC0+IHZpZXcgY2xlYXZlXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmRpc3BhdGNoRXZlbnQoZWwsICdpbnB1dCcpLCAwKTtcblxuICB9XG5cbiAgcHJpdmF0ZSBkaXNwYXRjaEV2ZW50IChlbCwgZXZlbnRUeXBlKSB7XG5cbiAgICBjb25zdCBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LmluaXRFdmVudChldmVudFR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gICAgZWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmd4Q2xlYXZlRGlyZWN0aXZlIH0gZnJvbSAnLi9uZ3gtY2xlYXZlLmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtdLFxuICBkZWNsYXJhdGlvbnM6IFtOZ3hDbGVhdmVEaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbTmd4Q2xlYXZlRGlyZWN0aXZlXSxcbn0pXG5leHBvcnQgY2xhc3MgTmd4Q2xlYXZlRGlyZWN0aXZlTW9kdWxlIHtcbn1cbiJdLCJuYW1lcyI6WyJEaXJlY3RpdmUiLCJFbGVtZW50UmVmIiwiSW5qZWN0IiwiTkdfVkFMVUVfQUNDRVNTT1IiLCJPcHRpb25hbCIsIklucHV0IiwiSG9zdExpc3RlbmVyIiwiTmdNb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O1FBb0NFLDRCQUNVLFlBQ3VDO1lBRHZDLGVBQVUsR0FBVixVQUFVO1lBQzZCLG1CQUFjLEdBQWQsY0FBYztTQUU5RDs4QkFsQlksc0NBQU07Ozs7MEJBQUUsTUFBVztnQkFFOUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7Z0JBRXRCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzs7Ozs7Ozs7UUFnQm5CLHFDQUFROzs7WUFBUjtnQkFBQSxpQkEyQkM7Z0JBekJDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFO29CQUV4QixPQUFPLENBQUMsSUFBSSxDQUFDLHdHQUF3RyxDQUFDLENBQUM7b0JBRXZILE9BQU87aUJBRVI7Z0JBRUQsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRTtvQkFFOUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUU3QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDO29CQUNsRCxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsR0FBRyxVQUFDLEtBQUs7d0JBRXJDLElBQUksS0FBSSxDQUFDLFdBQVcsRUFBRTs0QkFDcEIsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQzt5QkFDbkQ7d0JBRUQsS0FBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO3FCQUVsQixDQUFDO2lCQUVIO2FBRUY7Ozs7UUFFRCx3Q0FBVzs7O1lBQVg7Z0JBRUUsSUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7b0JBRTNDLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7aUJBRW5EO2dCQUVELElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtvQkFFeEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztpQkFFaEM7YUFFRjs7Ozs7UUFHRCxvQ0FBTzs7OztzQkFBRSxLQUFhO2dCQUVwQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQzs7Ozs7UUFJZCxzQ0FBUzs7Ozs7Z0JBRWYsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO29CQUV4QixJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDO2lCQUVoQztnQkFFRCxxQkFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7Z0JBQ3pDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxNQUFNLENBQUMsRUFBRSx1QkFDL0IsSUFBSSxDQUFDLE9BQU8sSUFDZixjQUFjLEVBQUUsVUFBQyxFQUFVOzRCQUFSLGtCQUFNO3dCQUN2QixJQUFJLE1BQU0sQ0FBQyxLQUFLLEtBQUssS0FBSSxDQUFDLE1BQU0sRUFBRTs0QkFFaEMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7eUJBRWpDO3FCQUNGLElBQ0QsQ0FBQzs7Z0JBR0gsVUFBVSxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsR0FBQSxFQUFFLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O1FBSS9DLDBDQUFhOzs7OztzQkFBRSxFQUFFLEVBQUUsU0FBUztnQkFFbEMscUJBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQzVDLEtBQUssQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDekMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7O29CQTFHM0JBLGNBQVMsU0FBQzt3QkFDVCxRQUFRLEVBQUUsZ0NBQWdDO3FCQUMzQzs7Ozs7d0JBakJDQyxlQUFVO29EQW9DUEMsV0FBTSxTQUFDQyx1QkFBaUIsY0FBR0MsYUFBUTs7OzsrQkFoQnJDQyxVQUFLO2dDQWlFTEMsaUJBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQzs7aUNBdkZoRDs7Ozs7OztBQ0FBOzs7O29CQUdDQyxhQUFRLFNBQUM7d0JBQ1IsT0FBTyxFQUFFLEVBQUU7d0JBQ1gsWUFBWSxFQUFFLENBQUMsa0JBQWtCLENBQUM7d0JBQ2xDLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDO3FCQUM5Qjs7dUNBUEQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==