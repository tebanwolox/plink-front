/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostListener, Inject, Input, Optional, } from '@angular/core';
import { NG_VALUE_ACCESSOR, } from '@angular/forms';
import * as Cleave from 'cleave.js';
var NgxCleaveDirective = /** @class */ (function () {
    function NgxCleaveDirective(elementRef, valueAccessors) {
        this.elementRef = elementRef;
        this.valueAccessors = valueAccessors;
    }
    Object.defineProperty(NgxCleaveDirective.prototype, "cleave", {
        set: /**
         * @param {?} cleave
         * @return {?}
         */
        function (cleave) {
            this._cleave = cleave;
            this.setCleave();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxCleaveDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.valueAccessors) {
            console.warn('Note: The cleave directive should be used with the ngModel, formControl or formControlName directives.');
            return;
        }
        if (this.valueAccessors.length) {
            this._valueAccessor = this.valueAccessors[0];
            this._writeValue = this._valueAccessor.writeValue;
            this._valueAccessor.writeValue = function (value) {
                if (_this._writeValue) {
                    _this._writeValue.call(_this._valueAccessor, value);
                }
                _this.setCleave();
            };
        }
    };
    /**
     * @return {?}
     */
    NgxCleaveDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._valueAccessor && this._writeValue) {
            this._valueAccessor.writeValue = this._writeValue;
        }
        if (this._cleaveInstance) {
            this._cleaveInstance.destroy();
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgxCleaveDirective.prototype.onInput = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._value = value;
    };
    /**
     * @return {?}
     */
    NgxCleaveDirective.prototype.setCleave = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._cleaveInstance) {
            this._cleaveInstance.destroy();
        }
        var /** @type {?} */ el = this.elementRef.nativeElement;
        this._cleaveInstance = new Cleave(el, tslib_1.__assign({}, this._cleave, { onValueChanged: function (_a) {
                var target = _a.target;
                if (target.value !== _this._value) {
                    _this.dispatchEvent(el, 'input');
                }
            } }));
        // hack for model -> view cleave
        setTimeout(function () { return _this.dispatchEvent(el, 'input'); }, 0);
    };
    /**
     * @param {?} el
     * @param {?} eventType
     * @return {?}
     */
    NgxCleaveDirective.prototype.dispatchEvent = /**
     * @param {?} el
     * @param {?} eventType
     * @return {?}
     */
    function (el, eventType) {
        var /** @type {?} */ event = document.createEvent('Event');
        event.initEvent(eventType, false, false);
        el.dispatchEvent(event);
    };
    NgxCleaveDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[cleave],textarea[cleave]',
                },] },
    ];
    /** @nocollapse */
    NgxCleaveDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Array, decorators: [{ type: Inject, args: [NG_VALUE_ACCESSOR,] }, { type: Optional },] },
    ]; };
    NgxCleaveDirective.propDecorators = {
        "cleave": [{ type: Input },],
        "onInput": [{ type: HostListener, args: ['input', ['$event.target.value'],] },],
    };
    return NgxCleaveDirective;
}());
export { NgxCleaveDirective };
function NgxCleaveDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgxCleaveDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgxCleaveDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    NgxCleaveDirective.propDecorators;
    /** @type {?} */
    NgxCleaveDirective.prototype._cleave;
    /** @type {?} */
    NgxCleaveDirective.prototype._cleaveInstance;
    /** @type {?} */
    NgxCleaveDirective.prototype._value;
    /** @type {?} */
    NgxCleaveDirective.prototype._valueAccessor;
    /** @type {?} */
    NgxCleaveDirective.prototype._writeValue;
    /** @type {?} */
    NgxCleaveDirective.prototype.elementRef;
    /** @type {?} */
    NgxCleaveDirective.prototype.valueAccessors;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWNsZWF2ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY2xlYXZlLWRpcmVjdGl2ZS8iLCJzb3VyY2VzIjpbIm5neC1jbGVhdmUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEVBR0wsUUFBUSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFFTCxpQkFBaUIsR0FDbEIsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QixPQUFPLEtBQUssTUFBTSxNQUFNLFdBQVcsQ0FBQzs7SUFxQmxDLDRCQUNVLFlBQ3VDO1FBRHZDLGVBQVUsR0FBVixVQUFVO1FBQzZCLG1CQUFjLEdBQWQsY0FBYztLQUU5RDswQkFsQlksc0NBQU07Ozs7O2tCQUFFLE1BQVc7WUFFOUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7WUFFdEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDOzs7Ozs7OztJQWdCbkIscUNBQVE7OztJQUFSO1FBQUEsaUJBMkJDO1FBekJDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFFekIsT0FBTyxDQUFDLElBQUksQ0FBQyx3R0FBd0csQ0FBQyxDQUFDO1lBRXZILE1BQU0sQ0FBQztTQUVSO1FBRUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBRS9CLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUU3QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDO1lBQ2xELElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxHQUFHLFVBQUMsS0FBSztnQkFFckMsRUFBRSxDQUFDLENBQUMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7b0JBQ3JCLEtBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7aUJBQ25EO2dCQUVELEtBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUVsQixDQUFDO1NBRUg7S0FFRjs7OztJQUVELHdDQUFXOzs7SUFBWDtRQUVFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFFNUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUVuRDtRQUVELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1lBRXpCLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7U0FFaEM7S0FFRjs7Ozs7SUFHRCxvQ0FBTzs7OztjQUFFLEtBQWE7UUFFcEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7Ozs7O0lBSWQsc0NBQVM7Ozs7O1FBRWYsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7WUFFekIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUVoQztRQUVELHFCQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUN6QyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksTUFBTSxDQUFDLEVBQUUsdUJBQy9CLElBQUksQ0FBQyxPQUFPLElBQ2YsY0FBYyxFQUFFLFVBQUMsRUFBVTtvQkFBUixrQkFBTTtnQkFDdkIsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFFakMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7aUJBRWpDO2FBQ0YsSUFDRCxDQUFDOztRQUdILFVBQVUsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQS9CLENBQStCLEVBQUUsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7SUFJL0MsMENBQWE7Ozs7O2NBQUUsRUFBRSxFQUFFLFNBQVM7UUFFbEMscUJBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7OztnQkExRzNCLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0NBQWdDO2lCQUMzQzs7OztnQkFqQkMsVUFBVTs0Q0FvQ1AsTUFBTSxTQUFDLGlCQUFpQixjQUFHLFFBQVE7OzsyQkFoQnJDLEtBQUs7NEJBaUVMLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQzs7NkJBdkZoRDs7U0FvQmEsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBIb3N0TGlzdGVuZXIsXG4gIEluamVjdCxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPcHRpb25hbCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBDb250cm9sVmFsdWVBY2Nlc3NvcixcbiAgTkdfVkFMVUVfQUNDRVNTT1IsXG59IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0ICogYXMgQ2xlYXZlIGZyb20gJ2NsZWF2ZS5qcyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2lucHV0W2NsZWF2ZV0sdGV4dGFyZWFbY2xlYXZlXScsXG59KVxuZXhwb3J0IGNsYXNzIE5neENsZWF2ZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBASW5wdXQoKSBzZXQgY2xlYXZlIChjbGVhdmU6IGFueSkge1xuXG4gICAgdGhpcy5fY2xlYXZlID0gY2xlYXZlO1xuXG4gICAgdGhpcy5zZXRDbGVhdmUoKTtcblxuICB9XG5cbiAgcHJpdmF0ZSBfY2xlYXZlOiBhbnk7XG4gIHByaXZhdGUgX2NsZWF2ZUluc3RhbmNlOiBDbGVhdmU7XG4gIHByaXZhdGUgX3ZhbHVlOiBzdHJpbmc7XG4gIHByaXZhdGUgX3ZhbHVlQWNjZXNzb3I6IENvbnRyb2xWYWx1ZUFjY2Vzc29yO1xuICBwcml2YXRlIF93cml0ZVZhbHVlOiAodmFsdWUpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IgKFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBASW5qZWN0KE5HX1ZBTFVFX0FDQ0VTU09SKSBAT3B0aW9uYWwoKSBwcml2YXRlIHZhbHVlQWNjZXNzb3JzOiBDb250cm9sVmFsdWVBY2Nlc3NvcltdLFxuICApIHtcbiAgfVxuXG4gIG5nT25Jbml0ICgpIHtcblxuICAgIGlmICghdGhpcy52YWx1ZUFjY2Vzc29ycykge1xuXG4gICAgICBjb25zb2xlLndhcm4oJ05vdGU6IFRoZSBjbGVhdmUgZGlyZWN0aXZlIHNob3VsZCBiZSB1c2VkIHdpdGggdGhlIG5nTW9kZWwsIGZvcm1Db250cm9sIG9yIGZvcm1Db250cm9sTmFtZSBkaXJlY3RpdmVzLicpO1xuXG4gICAgICByZXR1cm47XG5cbiAgICB9XG5cbiAgICBpZiAodGhpcy52YWx1ZUFjY2Vzc29ycy5sZW5ndGgpIHtcblxuICAgICAgdGhpcy5fdmFsdWVBY2Nlc3NvciA9IHRoaXMudmFsdWVBY2Nlc3NvcnNbMF07XG5cbiAgICAgIHRoaXMuX3dyaXRlVmFsdWUgPSB0aGlzLl92YWx1ZUFjY2Vzc29yLndyaXRlVmFsdWU7XG4gICAgICB0aGlzLl92YWx1ZUFjY2Vzc29yLndyaXRlVmFsdWUgPSAodmFsdWUpID0+IHtcblxuICAgICAgICBpZiAodGhpcy5fd3JpdGVWYWx1ZSkge1xuICAgICAgICAgIHRoaXMuX3dyaXRlVmFsdWUuY2FsbCh0aGlzLl92YWx1ZUFjY2Vzc29yLCB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldENsZWF2ZSgpO1xuXG4gICAgICB9O1xuXG4gICAgfVxuXG4gIH1cblxuICBuZ09uRGVzdHJveSAoKSB7XG5cbiAgICBpZiAodGhpcy5fdmFsdWVBY2Nlc3NvciAmJiB0aGlzLl93cml0ZVZhbHVlKSB7XG5cbiAgICAgIHRoaXMuX3ZhbHVlQWNjZXNzb3Iud3JpdGVWYWx1ZSA9IHRoaXMuX3dyaXRlVmFsdWU7XG5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY2xlYXZlSW5zdGFuY2UpIHtcblxuICAgICAgdGhpcy5fY2xlYXZlSW5zdGFuY2UuZGVzdHJveSgpO1xuXG4gICAgfVxuXG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdpbnB1dCcsIFsnJGV2ZW50LnRhcmdldC52YWx1ZSddKVxuICBvbklucHV0ICh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG5cbiAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuXG4gIH1cblxuICBwcml2YXRlIHNldENsZWF2ZSAoKSB7XG5cbiAgICBpZiAodGhpcy5fY2xlYXZlSW5zdGFuY2UpIHtcblxuICAgICAgdGhpcy5fY2xlYXZlSW5zdGFuY2UuZGVzdHJveSgpO1xuXG4gICAgfVxuXG4gICAgY29uc3QgZWwgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICB0aGlzLl9jbGVhdmVJbnN0YW5jZSA9IG5ldyBDbGVhdmUoZWwsIHtcbiAgICAgIC4uLnRoaXMuX2NsZWF2ZSxcbiAgICAgIG9uVmFsdWVDaGFuZ2VkOiAoeyB0YXJnZXQgfSkgPT4ge1xuICAgICAgICBpZiAodGFyZ2V0LnZhbHVlICE9PSB0aGlzLl92YWx1ZSkge1xuXG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGVsLCAnaW5wdXQnKTtcblxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gaGFjayBmb3IgbW9kZWwgLT4gdmlldyBjbGVhdmVcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuZGlzcGF0Y2hFdmVudChlbCwgJ2lucHV0JyksIDApO1xuXG4gIH1cblxuICBwcml2YXRlIGRpc3BhdGNoRXZlbnQgKGVsLCBldmVudFR5cGUpIHtcblxuICAgIGNvbnN0IGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZXZlbnQuaW5pdEV2ZW50KGV2ZW50VHlwZSwgZmFsc2UsIGZhbHNlKTtcbiAgICBlbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcblxuICB9XG5cbn1cbiJdfQ==